// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package inputmock is a generated GoMock package.
package inputmock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockInput is a mock of Input interface.
type MockInput struct {
	ctrl     *gomock.Controller
	recorder *MockInputMockRecorder
}

// MockInputMockRecorder is the mock recorder for MockInput.
type MockInputMockRecorder struct {
	mock *MockInput
}

// NewMockInput creates a new mock instance.
func NewMockInput(ctrl *gomock.Controller) *MockInput {
	mock := &MockInput{ctrl: ctrl}
	mock.recorder = &MockInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInput) EXPECT() *MockInputMockRecorder {
	return m.recorder
}

// FileInRecordsForDate mocks base method.
func (m *MockInput) FileInRecordsForDate(filepath string, targetDate time.Time) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileInRecordsForDate", filepath, targetDate)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileInRecordsForDate indicates an expected call of FileInRecordsForDate.
func (mr *MockInputMockRecorder) FileInRecordsForDate(filepath, targetDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileInRecordsForDate", reflect.TypeOf((*MockInput)(nil).FileInRecordsForDate), filepath, targetDate)
}
